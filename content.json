{"meta":{"title":"PerseisQAQ's blog","subtitle":"","description":"","author":"PerseisQAQ","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Git学习笔记","text":"本学习笔记基于b站黑马程序员Git教程https://www.bilibili.com/video/BV1MU4y1Y7h5/ 1 Git下载与安装https://git-scm.com/ 在这里下载安装 2 Git配置2.1 基本配置2.1.1 设置用户信息 设置用户名 git config --global user.name &quot;yourname&quot;双引号内为用户名 设置邮箱 git config --global user.email &quot;youremail&quot;双引号内为邮箱 2.1.2 为常用命令配置别名 在用户目录下，创建 .bashrc 文件可以打开GitBash 执行 touch ~/.bashrc 在 .bashrc 中输入: 1234# 查看git提交日志alias git-log=&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;# 输出当前目录所有文件与基本信息alias ll=&#x27;ls -al&#x27; 2.2 配置本地仓库 创建一个空目录作为本地Git仓库 在目录里右键打开 Git bash 执行命令 git init 创建成功后目录里会有一个.git目录 3 Git常用指令3.1 文件状态转换 使用 git add 命令 工作区 -&gt; 暂存区 使用 git commit 命令 暂存区 -&gt; 本地仓库 3.2 查看修改的状态 执行命令 git status 3.3 提交工作区到暂存区 执行命令 git add . 如果有想要忽略的文件，创建一个 .gitignore 文件，将文件名写在里面 3.4 提交暂存区到本地仓库 执行命令 git commit -m &quot; &quot; 双引号内是你的commit内容 3.5 查看提交日志 执行命令 git log [options]（前面配置的） options包含： --all 显示所有分支 --pretty=oneline 提交信息显示为一行 --abbrev-commit 使输出的commitid更简洁 --graph 以图的形式显示 如果要查看已经删除的提交记录，执行命令 git reflog 3.6 版本回退 执行命令 git reset --hard &quot;commitid&quot; commitid可以在log中查看 4 分支4.1 查看本地分支 执行命令 git branch 4.2 创建本地分支 执行命令 git branch branchname branchname为分支名 4.3 切换分支 执行命令 git checkout branchname 如果想要切换到一个不存在的分支（切换的同时创建分支），执行命令 git checkout -b branchname 4.4 合并分支 切换到目标分支 执行命令 git merge branchname 4.5 删除分支只能删除当前分支以外的分支 git branch -d branchname 删除分支事，需要做各种检查 git branch -D branchname 不做任何检查，强制删除分支 4.6 分支重命名 执行命令 git branch -m oldname newname 4.7 解决冲突两个分支对文件的修改存在冲突（如同时修改了同一文件的同一行），就要手动解决冲突 处理文件中冲突的地方 提交到缓存区 提交到仓库（不用加-m） 5 Git远程仓库这里选择了github 5.1 创建SSH Key 查询用户主目录下是否存在.ssh文件，里面是否有id_rsa与id_rsa.pub这两个文件 如果没有，在开始菜单中找到GitBash，输入 ssh-keygen -t rsa -C &quot;your_email&quot; 双引号内为github注册使用的邮箱 5.2 github填写SSH Key 点击右上角头像，打开“Settings”-“Account settings”-“SSH Keys”页面 点击“New SSH Key” 在Key里填写id_rsa.pub的内容 5.3 验证是否成功 在GitBash里输入 ssh -T git@github.com第一次设置需要输入yes，如果出现： 1Hi xxx! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. 则为成功 5.4 在github建仓库 建一个仓库用来存放项目 5.5 关联远程仓库有两种可选方法 5.5.1 clone仓库地址到本地这种方法可以实现一个仓库存放多个不同的代码 在&lt;&gt;Code那里复制地址 clone到本地 （可以修改名称），记得改成自己仓库的地址（ 1git clone https://github.com/PerseisQAQ/projects.git 在文件夹的内部可以创建多个不同的文件夹，不同的文件夹放置不同的项目代码。这样就可以实现很多不同的项目代码放置到同一个代码仓库中 5.5.2 关联远程仓库到本地仓库 根据仓库地址，在本地仓库的命令行输入，记得改成自己仓库的地址（ 1git remote add origin https://github.com/PerseisQAQ/projects.git 5.6 本地内容上传关联好仓库后就可以把本地仓库的内容推送到远程仓库了，在GitBash输入 如果新建的远程仓库是空的 1git push -u origin master 如果远程仓库非空 1git push origin master 5.7 从远程仓库抓取与拉取 抓取命令 get fetch [远端名称][分支名] 将仓库里的更新都抓取到本地，不进行合并 如果不指定远端名称和分支名，则抓取所有分支 拉取命令 git pull [远端名称][分支名] 将仓库里的更新拉到本地并自动进行合并（fetch+merge） 如果不指定远端名称和分支名，则抓取所有并更新当前分支 5.8 远程解决冲突 push之前先pull一下，看看有没有冲突，有冲突在本地解决掉再push 6 记录一下遇到的奇怪问题们6.1 clone到本地仓库时6.1.1 端口443连接失败1Failed to connect to github.com port 443 after 21271 ms: Couldn&#x27;t connect to server 原因：正在使用VPN，VPN的使用可能会改变本机的系统端口号，从而影响到Git的正常连接 解决方法： 打开“设置 -&gt; 网络和Internet -&gt; 代理”，记录下当前的端口号 设置Git端口号，假设当前端口号为7890，使用命令 12git config --global http.proxy 127.0.0.1:7890git config --global https.proxy 127.0.0.1:7890","path":"2024/07/07/Git学习笔记/"}],"categories":[],"tags":[]}